@using PL.wwwroot.Componentes


@*Necesario para poder redirigir a otro componente*@
@inject NavigationManager NavigationManager

<div class="container">

    <label>Ingresa el nombre del producto a buscar:</label>
    <input class="form-control" @bind="NombreProducto" />
    <br />
    <button class="btn btn-primary" @onclick="GetAll">Buscar</button>
</div>

<br />

@{
    if (cargarTabla == false)
    {
        GetAll();
    }
    
}

<br />

<button class="btn btn-success" @onclick='() => RedirigirFormulario(0,"/ProductoForm")'>Añadir producto</button>

<br />

@if (productoResult.Productos != null && productoResult.Productos.Count > 0)
{

    <div class="container">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Editar</th>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Precio</th>
                    <th>Categoria</th>
                    <th>Eliminar</th>
                </tr>
            </thead>
            <tbody>
                @foreach (ML.Producto productoResult in productoResult.Productos)
                {
                    <tr>
                        <td>
                            <button class="btn btn-primary" @onclick='() => RedirigirFormulario(productoResult.Id.Value,"/ProductoForm")'>Editar</button>
                        </td>
                        <td>@productoResult.Id</td>
                        <td>@productoResult.Nombre</td>
                        <td>@productoResult.Precio</td>
                        <td>@productoResult.Categoria.Nombre</td>
                        <td>
                            <button class="btn btn-danger" @onclick='() => OpenDeleteDialog(productoResult.Id.Value,"Eliminar producto",productoResult.Nombre,"Delete")'>Eliminar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <br>

        <div class="alert alert-success">@productoResult.Informacion.Mensaje</div>
    </div>
}
else
{
    <div class="alert alert-danger">@productoResult.Informacion.Mensaje</div>
}


@if (DeleteDialogOpen)
{
    <Modal Title="@Title"
           Text="@Text"
           FromComponent="@FromComponent"
           OnClose="@OnDeleteDialogClose"
           FuncionBoton="@AllowDelete">
    </Modal>
}

@code {

    public ML.Producto productoResult = new ML.Producto();

    public string? NombreProducto { get; set; } = "";

    public bool cargarTabla { get; set; }

    private ML.Informacion informacionDelete = new ML.Informacion();



    private void GetAll()
    {

        productoResult.Productos = new List<ML.Producto>();
        productoResult.Informacion = new ML.Informacion();

        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://localhost:5289/api/Producto/");

                var responseTask = client.GetAsync("GetAll/" + NombreProducto);
                responseTask.Wait();

                var resultTask = responseTask.Result;

                var readTask = resultTask.Content.ReadAsAsync<ML.Producto>();
                readTask.Wait();

                if (resultTask.IsSuccessStatusCode)
                {

                    if (readTask.Result.Informacion.Estatus.Value)
                    {
                        foreach (var objeto in readTask.Result.Productos)
                        {
                            productoResult.Productos.Add(objeto);
                        }
                        productoResult.Informacion.Estatus = readTask.Result.Informacion.Estatus;
                        productoResult.Informacion.Mensaje = readTask.Result.Informacion.Mensaje;
                    }
                    else
                    {
                        productoResult.Informacion.Estatus = readTask.Result.Informacion.Estatus;
                        productoResult.Informacion.Mensaje = readTask.Result.Informacion.Mensaje;
                    }
                } else
                {
                    productoResult.Informacion.Estatus = readTask.Result.Informacion.Estatus;
                    productoResult.Informacion.Mensaje = readTask.Result.Informacion.Mensaje;
                }
            }

            cargarTabla = true;
        }
        catch (Exception ex)
        {
            productoResult.Informacion.Estatus = false;
            productoResult.Informacion.Mensaje = "A ocurrido un error: " + ex.Message;
        }

    }


    private void Delete(int idProducto)
    {
        informacionDelete = new ML.Informacion();

        try
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://localhost:5289/api/Producto/");

                var responseTask = client.DeleteAsync("Delete/" + idProducto.ToString());
                responseTask.Wait();

                var resultTask = responseTask.Result;

                var readTask = resultTask.Content.ReadAsAsync<ML.Informacion>();
                readTask.Wait();

                if (resultTask.IsSuccessStatusCode)
                {

                    informacionDelete.Estatus = readTask.Result.Estatus;
                    informacionDelete.Mensaje = readTask.Result.Mensaje;
                }
                else
                {

                    informacionDelete.Estatus = readTask.Result.Estatus;
                    informacionDelete.Mensaje = readTask.Result.Mensaje;
                }

                productoResult.Id = 0;
                Title = "Estatus operación";
                Text = informacionDelete.Mensaje;
                FromComponent = "Aceptar";
                DeleteDialogOpen = true;
                StateHasChanged();



            }
        }
        catch (Exception ex)
        {
            informacionDelete.Estatus = false;
            informacionDelete.Mensaje = ex.Message;
        }

        GetAll();


        // Cerrar modal depues de la operacion
        //DeleteDialogOpen = false;
        //StateHasChanged();

    }



  



    // ATRIBUTOS Y METODOS PARA EL MODAL
    public bool DeleteDialogOpen { get; set; }

    public string Title { get; set; }

    public string Text { get; set; }

    public string FromComponent { get; set; }

    public async Task OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        StateHasChanged();
    }

    public void OpenDeleteDialog(int idProducto,string title, string text, string component)
    {
        productoResult.Id = idProducto;
        Title = title;
        Text = text;
        FromComponent = component;
        DeleteDialogOpen = true;
        StateHasChanged();
    }


    public async Task AllowDelete()
    {
        Delete(productoResult.Id.Value);
        string Mensaje = informacionDelete.Mensaje;
        StateHasChanged();
    }





    // Funcion para redirigir a otro componente
    void RedirigirFormulario(int idProducto, string componente)
    {
        NavigationManager.NavigateTo(componente + "/" + idProducto.ToString());
    }
}


